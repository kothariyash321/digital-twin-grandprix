# -*- coding: utf-8 -*-
"""data_collection/kafka_producer.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hu0AnSkxpSwqyZ_F0QpLmFSsXreBsi9D
"""

# ==============================================================================
# File: data_collection/kafka_producer.py
# Description: Simulates sensor data from the go-kart and publishes it to a
#              Kafka topic in real-time.
# ==============================================================================

import json
import time
import random
from datetime import datetime
from kafka import KafkaProducer

# --- Configuration ---
KAFKA_TOPIC = "kart-telemetry"
KAFKA_SERVER = "localhost:9092"
SESSION_ID = f"race_session_{int(time.time())}"
LAP_ID_COUNTER = 1

# --- Kafka Producer Initialization ---
try:
    producer = KafkaProducer(
        bootstrap_servers=[KAFKA_SERVER],
        value_serializer=lambda v: json.dumps(v).encode('utf-8')
    )
    print("Successfully connected to Kafka producer.")
except Exception as e:
    print(f"Error connecting to Kafka: {e}")
    exit()

# --- Sensor Data Simulation ---
def generate_sensor_data(lap_id):
    """Generates a single JSON object of simulated sensor data."""

    # Simulate realistic fluctuations
    base_rpm = 4000 + (random.random() * 1000)
    base_speed = 60 + (random.random() * 20)

    # Introduce an anomaly occasionally for predictive maintenance testing
    is_anomaly = random.random() < 0.05 # 5% chance of an anomaly
    brake_temp_fl = 450 + (random.random() * 50)
    if is_anomaly:
        brake_temp_fl += 100 # Spike the temperature

    data = {
        "timestamp": datetime.utcnow().isoformat(),
        "session_id": SESSION_ID,
        "lap_id": f"lap_{lap_id}",
        "sensors": {
            "accelerometer": {
                "x": round(random.uniform(-2.5, 2.5), 4),
                "y": round(random.uniform(-2.5, 2.5), 4),
                "z": round(9.8 + random.uniform(-0.5, 0.5), 4)
            },
            "gps": {
                "lat": round(40.4237 + (random.random() * 0.01), 6), # Purdue University coordinates
                "lon": round(-86.9212 + (random.random() * 0.01), 6),
                "speed": round(base_speed + random.uniform(-5, 5), 2)
            },
            "temperature": {
                "engine": round(95 + random.uniform(-2, 2), 2),
                "brake_fl": round(brake_temp_fl, 2),
                "brake_fr": round(440 + random.uniform(-20, 20), 2)
            },
            "tire_pressure": {
                "fl": round(18 + random.uniform(-0.5, 0.5), 2),
                "fr": round(18.2 + random.uniform(-0.5, 0.5), 2),
                "rl": round(19.0 + random.uniform(-0.5, 0.5), 2),
                "rr": round(19.1 + random.uniform(-0.5, 0.5), 2)
            },
            "engine": {
                "rpm": round(base_rpm + random.uniform(-200, 200), 2)
            }
        }
    }
    return data

# --- Main Publishing Loop ---
if __name__ == "__main__":
    print(f"Starting to send data to Kafka topic: {KAFKA_TOPIC}")
    print(f"Using Session ID: {SESSION_ID}")

    lap_counter = 1
    messages_sent_in_lap = 0

    try:
        while True:
            # Generate and send one data point
            telemetry_data = generate_sensor_data(lap_counter)
            producer.send(KAFKA_TOPIC, value=telemetry_data)

            # Print progress
            print(f"Sent message for Lap {lap_counter}: RPM={telemetry_data['sensors']['engine']['rpm']:.0f}, Speed={telemetry_data['sensors']['gps']['speed']:.1f} km/h")

            messages_sent_in_lap += 1

            # Simulate a new lap every 900 messages (~90 seconds at 10Hz)
            if messages_sent_in_lap >= 900:
                lap_counter += 1
                messages_sent_in_lap = 0
                print("-" * 50)
                print(f"NEW LAP: Starting Lap {lap_counter}")
                print("-" * 50)

            # Publish data at a frequency of 100Hz
            time.sleep(0.01)

    except KeyboardInterrupt:
        print("\nStopping producer...")
    finally:
        producer.flush()
        producer.close()
        print("Kafka producer closed.")