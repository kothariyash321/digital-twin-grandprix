# -*- coding: utf-8 -*-
"""Sensor_Simulator

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LIXqZad37i8WEMEMEGE29Kq11gNWPtDx
"""

# ==============================================================================
# File: src/data_collection/sensor_simulator.py
# Description: Contains the logic to generate simulated data for a single sensor reading.
# ==============================================================================
import random
from datetime import datetime

class SensorSimulator:
    """Simulates realistic sensor data for the go-kart."""

    def __init__(self, config):
        """Initializes the simulator with sensor configurations."""
        self.config = config['sensors']

    def _get_param(self, sensor_id, param_name):
        """Helper to get a parameter for a sensor from the config."""
        for sensor in self.config:
            if sensor['id'] == sensor_id:
                return sensor['parameters'][param_name]
        return None

    def generate_reading(self, session_id, lap_id):
        """Generates a complete telemetry reading for a single timestamp."""

        # Simulate an anomaly for predictive maintenance testing
        anomaly_chance = self._get_param('temperature', 'anomaly_chance')
        is_anomaly = random.random() < anomaly_chance
        brake_temp_fl = self._get_param('temperature', 'brake_base') + random.uniform(*self._get_param('temperature', 'brake_noise'))
        if is_anomaly:
            brake_temp_fl += self._get_param('temperature', 'anomaly_spike')

        base_rpm = self._get_param('engine', 'base_rpm') + (random.random() * self._get_param('engine', 'rpm_fluctuation'))
        base_speed = self._get_param('gps', 'base_speed_kmh') + (random.random() * self._get_param('gps', 'speed_fluctuation'))

        data = {
            "timestamp": datetime.utcnow().isoformat() + "Z", # ISO 8601 format
            "session_id": session_id,
            "lap_id": lap_id,
            "sensors": {
                "accelerometer": {
                    "x": round(random.uniform(*self._get_param('accelerometer', 'x_range')), 4),
                    "y": round(random.uniform(*self._get_param('accelerometer', 'y_range')), 4),
                    "z": round(self._get_param('accelerometer', 'z_base') + random.uniform(*self._get_param('accelerometer', 'z_noise')), 4)
                },
                "gps": {
                    "lat": round(self._get_param('gps', 'base_lat') + (random.random() * self._get_param('gps', 'noise')), 6),
                    "lon": round(self._get_param('gps', 'base_lon') + (random.random() * self._get_param('gps', 'noise')), 6),
                    "speed": round(base_speed + random.uniform(-5, 5), 2)
                },
                "temperature": {
                    "engine": round(self._get_param('temperature', 'engine_base') + random.uniform(*self._get_param('temperature', 'engine_noise')), 2),
                    "brake_fl": round(brake_temp_fl, 2),
                    "brake_fr": round(self._get_param('temperature', 'brake_base') + random.uniform(*self._get_param('temperature', 'brake_noise')), 2)
                },
                "tire_pressure": {
                    "fl": round(self._get_param('tire_pressure', 'fl_base') + random.uniform(*self._get_param('tire_pressure', 'noise')), 2),
                    "fr": round(self._get_param('tire_pressure', 'fr_base') + random.uniform(*self._get_param('tire_pressure', 'noise')), 2),
                    "rl": round(self._get_param('tire_pressure', 'rl_base') + random.uniform(*self._get_param('tire_pressure', 'noise')), 2),
                    "rr": round(self._get_param('tire_pressure', 'rr_base') + random.uniform(*self._get_param('tire_pressure', 'noise')), 2)
                },
                "engine": {
                    "rpm": round(base_rpm + random.uniform(*self._get_param('engine', 'rpm_noise')), 2)
                }
            }
        }
        return data

```python
# ==============================================================================
# File: src/data_collection/kafka_producer.py
# Description: Main script to publish simulated sensor data to Kafka.
#              This script uses the SensorSimulator and configuration files.
# ==============================================================================

import json
import time
import yaml
from kafka import KafkaProducer
from sensor_simulator import SensorSimulator

def load_config(path):
    """Loads a YAML configuration file."""
    with open(path, 'r') as f:
        return yaml.safe_load(f)

def create_kafka_producer(config):
    """Creates and returns a KafkaProducer instance."""
    try:
        producer = KafkaProducer(
            bootstrap_servers=[config['broker']],
            client_id=config.get('client_id', 'sensor-producer'),
            value_serializer=lambda v: json.dumps(v).encode('utf-8'),
            retries=5
        )
        print("Successfully connected to Kafka producer.")
        return producer
    except Exception as e:
        print(f"Error connecting to Kafka: {e}")
        return None

def main():
    """Main function to run the producer."""
    # Load configurations
    kafka_config = load_config("src/config/kafka.yaml")
    sensors_config = load_config("src/config/sensors.yaml")

    # Initialize components
    producer = create_kafka_producer(kafka_config)
    if not producer:
        return

    simulator = SensorSimulator(sensors_config)

    session_id = f"race_session_{int(time.time())}"
    lap_counter = 1
    messages_in_lap = 0
    publish_interval = 1.0 / sensors_config.get('simulation_frequency_hz', 100)

    print(f"Starting to send data to Kafka topic: {kafka_config['topic']}")
    print(f"Publishing at {sensors_config['simulation_frequency_hz']} Hz (1 message every {publish_interval:.3f}s)")
    print(f"Session ID: {session_id}")

    try:
        while True:
            telemetry_data = simulator.generate_reading(session_id, f"lap_{lap_counter}")

            # Send data to Kafka
            producer.send(kafka_config['topic'], value=telemetry_data)

            print(f"Sent Lap {lap_counter}: RPM={telemetry_data['sensors']['engine']['rpm']:.0f}, Speed={telemetry_data['sensors']['gps']['speed']:.1f}", end='\r')

            messages_in_lap += 1
            # Assuming 90 seconds per lap
            if messages_in_lap >= (90 * sensors_config['simulation_frequency_hz']):
                lap_counter += 1
                messages_in_lap = 0
                print("\n" + "-"*50 + f"\nNEW LAP: Starting Lap {lap_counter}\n" + "-"*50)

            time.sleep(publish_interval)

    except KeyboardInterrupt:
        print("\nStopping producer...")
    finally:
        if producer:
            producer.flush()
            producer.close()
            print("Kafka producer closed.")

if __name__ == "__main__":
    main()