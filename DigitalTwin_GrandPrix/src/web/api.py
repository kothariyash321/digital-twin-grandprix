# -*- coding: utf-8 -*-
"""api

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jfh0EbG2OiPpFioCPX_Zh4T6XTHiD436
"""

# ==============================================================================
# File: src/web/api.py
# Description: Defines the RESTful API endpoints for the web application.
# ==============================================================================
from flask import Blueprint, jsonify
from bson import json_util
import json
from ..storage.mongodb_client import MongoDBClient

# Create a Blueprint, which is a way to organize a group of related views
api_bp = Blueprint('api', __name__, url_prefix='/api')

# Initialize the MongoDB client. It's better to manage this at the app level,
# but for simplicity in this blueprint, we'll create an instance.
mongo_client = MongoDBClient()

@api_bp.route('/telemetry/latest', methods=['GET'])
def get_latest_telemetry():
    """API endpoint to get the most recent telemetry data point."""
    if not mongo_client.db:
        return jsonify({"error": "Database connection failed"}), 500

    try:
        telemetry_collection = mongo_client.get_collection('telemetry')
        # Find the most recent document based on timestamp
        latest_data = list(telemetry_collection.find().sort('timestamp', -1).limit(1))

        if not latest_data:
            return jsonify({"error": "No data found"}), 404

        # Use json_util to handle MongoDB-specific types like ObjectId and ISODate
        return json.loads(json_util.dumps(latest_data)), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@api_bp.route('/alerts', methods=['GET'])
def get_alerts():
    """API endpoint to get the latest predictive maintenance and safety alerts."""
    if not mongo_client.db:
        return jsonify({"error": "Database connection failed"}), 500

    try:
        alerts_collection = mongo_client.get_collection('alerts')
        # Fetch the 5 most recent alerts
        alerts = list(alerts_collection.find().sort('timestamp', -1).limit(5))
        return json.loads(json_util.dumps(alerts)), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@api_bp.route('/race_history/<session_id>', methods=['GET'])
def get_race_history(session_id):
    """API endpoint to get all telemetry data for a specific race session."""
    if not mongo_client.db:
        return jsonify({"error": "Database connection failed"}), 500

    try:
        telemetry_collection = mongo_client.get_collection('telemetry')
        session_data = list(telemetry_collection.find({'session_id': session_id}).sort('timestamp', 1))

        if not session_data:
            return jsonify({"error": "Session not found"}), 404

        return json.loads(json_util.dumps(session_data)), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500