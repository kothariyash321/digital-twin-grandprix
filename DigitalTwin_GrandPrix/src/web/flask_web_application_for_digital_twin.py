# -*- coding: utf-8 -*-
"""Flask Web Application for Digital Twin

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W8513OhznWoiO2xDqlJm2_idXp5JGBPn
"""

# ==============================================================================
# File: app.py
# Description: Main Flask application file for the Digital Twin UI.
# ==============================================================================

from flask import Flask, jsonify, render_template
from pymongo import MongoClient
import json
from bson import json_util

app = Flask(__name__)

# --- Database Connection ---
# Connect to your MongoDB instance
client = MongoClient('mongodb://localhost:27017/')
db = client['grand_prix_db']
telemetry_collection = db['telemetry']
alerts_collection = db['alerts']

# --- Routes ---

@app.route('/')
def index():
    """
    Renders the main digital twin dashboard page.
    """
    return render_template('index.html')

@app.route('/api/telemetry/latest')
def get_latest_telemetry():
    """
    API endpoint to get the most recent telemetry data point.
    This is polled by the front-end to update the real-time gauges.
    """
    try:
        # Find the most recent document based on timestamp
        latest_data = telemetry_collection.find().sort('timestamp', -1).limit(1)
        # The result from find() is a cursor, so we need to iterate
        result = list(latest_data)
        if not result:
            return jsonify({"error": "No data found"}), 404

        # Convert the BSON document to a JSON serializable format
        # json_util handles MongoDB specific types like ObjectId
        return json.dumps(result, default=json_util.default), 200, {'ContentType':'application/json'}
    except Exception as e:
        print(f"Error fetching latest telemetry: {e}")
        return jsonify({"error": str(e)}), 500


@app.route('/api/alerts')
def get_alerts():
    """
    API endpoint to get the latest predictive maintenance and safety alerts.
    """
    try:
        # Fetch the 5 most recent alerts
        alerts = alerts_collection.find().sort('timestamp', -1).limit(5)
        result = list(alerts)
        return json.dumps(result, default=json_util.default), 200, {'ContentType':'application/json'}
    except Exception as e:
        print(f"Error fetching alerts: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/api/race_history/<session_id>')
def get_race_history(session_id):
    """
    API endpoint to get all telemetry data for a specific race session.
    """
    try:
        session_data = telemetry_collection.find({'session_id': session_id}).sort('timestamp', 1)
        result = list(session_data)
        if not result:
            return jsonify({"error": "Session not found"}), 404
        return json.dumps(result, default=json_util.default), 200, {'ContentType':'application/json'}
    except Exception as e:
        print(f"Error fetching race history: {e}")
        return jsonify({"error": str(e)}), 500


if __name__ == '__main__':
    # Run the Flask app
    # In a production environment, use a proper WSGI server like Gunicorn
    app.run(debug=True, port=5000)

# ==============================================================================
# File: templates/index.html
# Description: HTML structure for the Digital Twin dashboard.
# ==============================================================================
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Purdue Grand Prix - Digital Twin</title>
    <script src="[https://cdn.tailwindcss.com](https://cdn.tailwindcss.com)"></script>
    <script src="[https://d3js.org/d3.v7.min.js](https://d3js.org/d3.v7.min.js)"></script>
    <link href="[https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap](https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap)" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .gauge-container .label {
            font-size: 0.875rem;
            font-weight: 500;
            color: #9ca3af;
        }
        .gauge-container .value {
            font-size: 2.25rem;
            font-weight: 700;
            color: #f9fafb;
        }
        .gauge-container .unit {
            font-size: 1rem;
            font-weight: 500;
            color: #9ca3af;
        }
    </style>
</head>
<body class="bg-gray-900 text-white p-4 sm:p-6 lg:p-8">

    <div class="max-w-7xl mx-auto">
        <!-- Header -->
        <header class="mb-8">
            <h1 class="text-3xl font-bold text-yellow-400">Purdue Grand Prix Digital Twin</h1>
            <p class="text-gray-400">Real-time Vehicle Telemetry and Predictive Analytics</p>
        </header>

        <!-- Main Grid -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">

            <!-- Left Column: Real-time Gauges -->
            <div class="lg:col-span-1 space-y-6">
                <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
                    <h2 class="text-xl font-semibold mb-4 text-yellow-300">Live Telemetry</h2>
                    <div id="real-time-gauges" class="space-y-4">
                        <!-- Gauges will be dynamically inserted here -->
                         <div class="gauge-container text-center bg-gray-700 p-4 rounded-lg">
                            <div class="label">Speed</div>
                            <div class="value" id="speed-value">--</div>
                            <div class="unit">km/h</div>
                        </div>
                        <div class="gauge-container text-center bg-gray-700 p-4 rounded-lg">
                            <div class="label">Engine RPM</div>
                            <div class="value" id="rpm-value">--</div>
                            <div class="unit">RPM</div>
                        </div>
                         <div class="gauge-container text-center bg-gray-700 p-4 rounded-lg">
                            <div class="label">Brake Temp</div>
                            <div class="value" id="brake-temp-value">--</div>
                            <div class="unit">Â°C</div>
                        </div>
                        <div class="gauge-container text-center bg-gray-700 p-4 rounded-lg">
                            <div class="label">Tire Pressure (FL)</div>
                            <div class="value" id="tire-pressure-value">--</div>
                            <div class="unit">PSI</div>
                        </div>
                    </div>
                </div>
                <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
                    <h2 class="text-xl font-semibold mb-4 text-red-400">Predictive Alerts</h2>
                    <ul id="alerts-list" class="space-y-3">
                        <!-- Alerts will be dynamically inserted here -->
                        <li class="text-gray-400">No alerts to display.</li>
                    </ul>
                </div>
            </div>

            <!-- Right Column: Charts and Map -->
            <div class="lg:col-span-2 space-y-6">
                <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
                    <h2 class="text-xl font-semibold mb-4 text-yellow-300">Speed Over Time</h2>
                    <div id="speed-chart-container" class="w-full h-64"></div>
                </div>
                <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
                    <h2 class="text-xl font-semibold mb-4 text-yellow-300">G-Force</h2>
                    <div id="g-force-chart-container" class="w-full h-64"></div>
                </div>
                 <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
                    <h2 class="text-xl font-semibold mb-4 text-yellow-300">Racing Line (GPS)</h2>
                    <div id="gps-map-container" class="w-full h-64 bg-gray-700 rounded-md"></div>
                </div>
            </div>
        </div>
    </div>

    <script src="{{ url_for('static', filename='js/dashboard.js') }}"></script>
</body>
</html>
```javascript
// ==============================================================================
// File: static/js/dashboard.js
// Description: D3.js and data fetching logic for the dashboard.
// ==============================================================================

document.addEventListener('DOMContentLoaded', function () {

    // --- Chart Setup ---
    const margin = { top: 20, right: 30, bottom: 40, left: 50 };

    function getContainerWidth(containerId) {
        const container = document.getElementById(containerId);
        return container ? container.clientWidth : 600;
    }

    function getContainerHeight(containerId) {
        const container = document.getElementById(containerId);
        return container ? container.clientHeight : 256;
    }

    // Speed Chart
    let speedChartWidth = getContainerWidth('speed-chart-container') - margin.left - margin.right;
    let speedChartHeight = getContainerHeight('speed-chart-container') - margin.top - margin.bottom;
    const speedSvg = d3.select("#speed-chart-container")
        .append("svg")
        .attr("width", speedChartWidth + margin.left + margin.right)
        .attr("height", speedChartHeight + margin.top + margin.bottom)
        .append("g")
        .attr("transform", `translate(${margin.left},${margin.top})`);

    // G-Force Chart
    let gForceChartWidth = getContainerWidth('g-force-chart-container') - margin.left - margin.right;
    let gForceChartHeight = getContainerHeight('g-force-chart-container') - margin.top - margin.bottom;
    const gForceSvg = d3.select("#g-force-chart-container")
        .append("svg")
        .attr("width", gForceChartWidth + margin.left + margin.right)
        .attr("height", gForceChartHeight + margin.top + margin.bottom)
        .append("g")
        .attr("transform", `translate(${margin.left},${margin.top})`);

    // GPS Map
    let gpsMapWidth = getContainerWidth('gps-map-container');
    let gpsMapHeight = getContainerHeight('gps-map-container');
    const gpsSvg = d3.select("#gps-map-container")
        .append("svg")
        .attr("width", gpsMapWidth)
        .attr("height", gpsMapHeight);


    let telemetryHistory = [];

    // --- Data Fetching Functions ---

    async function fetchLatestTelemetry() {
        try {
            const response = await fetch('/api/telemetry/latest');
            if (!response.ok) {
                console.error("Failed to fetch latest telemetry");
                return;
            }
            const data = await response.json();
            if (data && data.length > 0) {
                const latest = data[0];
                updateGauges(latest.sensors);

                // Add to history for charts
                telemetryHistory.push(latest);
                if (telemetryHistory.length > 100) { // Keep history to a reasonable size
                    telemetryHistory.shift();
                }

                updateCharts();
            }
        } catch (error) {
            console.error('Error fetching telemetry:', error);
        }
    }

    async function fetchAlerts() {
        try {
            const response = await fetch('/api/alerts');
             if (!response.ok) {
                console.error("Failed to fetch alerts");
                return;
            }
            const alerts = await response.json();
            updateAlertsList(alerts);
        } catch (error) {
            console.error('Error fetching alerts:', error);
        }
    }

    // --- UI Update Functions ---

    function updateGauges(sensors) {
        document.getElementById('speed-value').textContent = sensors.gps?.speed.toFixed(1) || '--';
        document.getElementById('rpm-value').textContent = sensors.engine?.rpm.toFixed(0) || '--';
        document.getElementById('brake-temp-value').textContent = sensors.temperature?.brake_fl.toFixed(1) || '--';
        document.getElementById('tire-pressure-value').textContent = sensors.tire_pressure?.fl.toFixed(1) || '--';
    }

    function updateAlertsList(alerts) {
        const list = document.getElementById('alerts-list');
        list.innerHTML = ''; // Clear existing alerts
        if (alerts.length === 0) {
            list.innerHTML = '<li class="text-gray-400">No alerts to display.</li>';
            return;
        }
        alerts.forEach(alert => {
            const li = document.createElement('li');
            li.className = 'p-3 rounded-md bg-red-900/50 border border-red-700';
            li.innerHTML = `
                <div class="font-bold text-red-400">${alert.alert_type}</div>
                <div class="text-sm text-gray-300">${alert.message}</div>
                <div class="text-xs text-gray-500">${new Date(alert.timestamp.$date).toLocaleString()}</div>
            `;
            list.appendChild(li);
        });
    }

    function updateCharts() {
        if (telemetryHistory.length < 2) return;

        // --- Update Speed Chart ---
        speedSvg.selectAll("*").remove(); // Clear previous chart

        const xSpeed = d3.scaleTime()
            .domain(d3.extent(telemetryHistory, d => new Date(d.timestamp.$date)))
            .range([0, speedChartWidth]);

        const ySpeed = d3.scaleLinear()
            .domain([0, d3.max(telemetryHistory, d => d.sensors.gps.speed) * 1.1])
            .range([speedChartHeight, 0]);

        speedSvg.append("g")
            .attr("transform", `translate(0,${speedChartHeight})`)
            .call(d3.axisBottom(xSpeed).ticks(5))
            .attr("class", "text-gray-400");

        speedSvg.append("g")
            .call(d3.axisLeft(ySpeed))
            .attr("class", "text-gray-400");

        const speedLine = d3.line()
            .x(d => xSpeed(new Date(d.timestamp.$date)))
            .y(d => ySpeed(d.sensors.gps.speed));

        speedSvg.append("path")
            .datum(telemetryHistory)
            .attr("fill", "none")
            .attr("stroke", "#facc15")
            .attr("stroke-width", 2)
            .attr("d", speedLine);

        // --- Update G-Force Chart ---
        gForceSvg.selectAll("*").remove();

        const yGforce = d3.scaleLinear()
            .domain([-3, 3]) // Assuming G-force ranges from -3 to 3
            .range([gForceChartHeight, 0]);

        const xGforce = d3.scaleTime()
             .domain(d3.extent(telemetryHistory, d => new Date(d.timestamp.$date)))
            .range([0, gForceChartWidth]);

        gForceSvg.append("g")
            .attr("transform", `translate(0,${gForceChartHeight})`)
            .call(d3.axisBottom(xGforce).ticks(5))
            .attr("class", "text-gray-400");

        gForceSvg.append("g")
            .call(d3.axisLeft(yGforce))
            .attr("class", "text-gray-400");

        // X-axis line
        const lineX = d3.line()
            .x(d => xGforce(new Date(d.timestamp.$date)))
            .y(d => yGforce(d.sensors.accelerometer.x));

        gForceSvg.append("path")
            .datum(telemetryHistory)
            .attr("fill", "none")
            .attr("stroke", "#60a5fa")
            .attr("stroke-width", 1.5)
            .attr("d", lineX);

        // Y-axis line
        const lineY = d3.line()
            .x(d => xGforce(new Date(d.timestamp.$date)))
            .y(d => yGforce(d.sensors.accelerometer.y));

        gForceSvg.append("path")
            .datum(telemetryHistory)
            .attr("fill", "none")
            .attr("stroke", "#f87171")
            .attr("stroke-width", 1.5)
            .attr("d", lineY);

        // --- Update GPS Map ---
        gpsSvg.selectAll("*").remove();

        const lonExtent = d3.extent(telemetryHistory, d => d.sensors.gps.lon);
        const latExtent = d3.extent(telemetryHistory, d => d.sensors.gps.lat);

        const xScaleGps = d3.scaleLinear()
            .domain(lonExtent)
            .range([20, gpsMapWidth - 20]);

        const yScaleGps = d3.scaleLinear()
            .domain(latExtent)
            .range([gpsMapHeight - 20, 20]);

        const gpsLine = d3.line()
            .x(d => xScaleGps(d.sensors.gps.lon))
            .y(d => yScaleGps(d.sensors.gps.lat));

        gpsSvg.append("path")
            .datum(telemetryHistory)
            .attr("fill", "none")
            .attr("stroke", "#a78bfa")
            .attr("stroke-width", 3)
            .attr("d", gpsLine);

        // Add a circle for the current position
        const lastPoint = telemetryHistory[telemetryHistory.length - 1];
        gpsSvg.append("circle")
            .attr("cx", xScaleGps(lastPoint.sensors.gps.lon))
            .attr("cy", yScaleGps(lastPoint.sensors.gps.lat))
            .attr("r", 6)
            .attr("fill", "#facc15");
    }


    // --- Initial Data Load and Interval ---
    fetchLatestTelemetry();
    fetchAlerts();

    setInterval(fetchLatestTelemetry, 1000); // Update gauges and charts every second
    setInterval(fetchAlerts, 5000); // Check for new alerts every 5 seconds

    window.addEventListener('resize', () => {
        // Recalculate dimensions and redraw charts on resize
        speedChartWidth = getContainerWidth('speed-chart-container') - margin.left - margin.right;
        speedChartHeight = getContainerHeight('speed-chart-container') - margin.top - margin.bottom;
        d3.select("#speed-chart-container svg").attr("width", speedChartWidth + margin.left + margin.right).attr("height", speedChartHeight + margin.top + margin.bottom);

        gForceChartWidth = getContainerWidth('g-force-chart-container') - margin.left - margin.right;
        gForceChartHeight = getContainerHeight('g-force-chart-container') - margin.top - margin.bottom;
        d3.select("#g-force-chart-container svg").attr("width", gForceChartWidth + margin.left + margin.right).attr("height", gForceChartHeight + margin.top + margin.bottom);

        gpsMapWidth = getContainerWidth('gps-map-container');
        gpsMapHeight = getContainerHeight('gps-map-container');
        d3.select("#gps-map-container svg").attr("width", gpsMapWidth).attr("height", gpsMapHeight);

        updateCharts();
    });
});
```css
/* ==============================================================================
File: static/css/style.css
Description: Basic styling for the dashboard. Most styling is done via Tailwind.
============================================================================== */

/* Custom styles can be added here if needed, but Tailwind is preferred. */
body {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

/* Style for D3.js chart axes */
.tick line {
    stroke: #4b5563;
}

.tick text {
    fill: #9ca3af;
}

.domain {
    stroke: #4b5563;
}