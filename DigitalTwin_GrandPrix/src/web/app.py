# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uM0FgvU12Sd1rkXZhx_Ff0ec4oSlMBTQ
"""

```python
# ==============================================================================
# File: src/web/app.py
# Description: Main Flask application entry point.
# ==============================================================================
from flask import Flask, render_template

# Import the Blueprint from the api module
from api import api_bp

def create_app():
    """Creates and configures the Flask application."""
    app = Flask(__name__, static_folder='static', template_folder='templates')

    # Register the API blueprint
    app.register_blueprint(api_bp)

    # --- Main Route ---
    @app.route('/')
    def index():
        """Renders the main digital twin dashboard page."""
        return render_template('index.html')

    return app

if __name__ == '__main__':
    app = create_app()
    # For production, use a WSGI server like Gunicorn or Waitress
    # Example: gunicorn -w 4 'src.web.app:create_app()'
    app.run(host='0.0.0.0', port=5000, debug=True)

```html
<!-- File: src/web/templates/index.html -->
<!-- This file remains the same as previously provided. -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Purdue Grand Prix - Digital Twin</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body class="bg-gray-900 text-white p-4 sm:p-6 lg:p-8">

    <div class="max-w-7xl mx-auto">
        <!-- Header -->
        <header class="mb-8">
            <h1 class="text-3xl font-bold text-yellow-400">Purdue Grand Prix Digital Twin</h1>
            <p class="text-gray-400">Real-time Vehicle Telemetry and Predictive Analytics</p>
        </header>

        <!-- Main Grid -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">

            <!-- Left Column: Real-time Gauges & Alerts -->
            <div class="lg:col-span-1 space-y-6">
                <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
                    <h2 class="text-xl font-semibold mb-4 text-yellow-300">Live Telemetry</h2>
                    <div id="real-time-gauges" class="grid grid-cols-2 gap-4">
                        <!-- Gauges will be dynamically inserted here -->
                         <div class="gauge-container text-center bg-gray-700 p-4 rounded-lg">
                            <div class="label">Speed</div>
                            <div class="value" id="speed-value">--</div>
                            <div class="unit">km/h</div>
                        </div>
                        <div class="gauge-container text-center bg-gray-700 p-4 rounded-lg">
                            <div class="label">Engine RPM</div>
                            <div class="value" id="rpm-value">--</div>
                            <div class="unit">RPM</div>
                        </div>
                         <div class="gauge-container text-center bg-gray-700 p-4 rounded-lg">
                            <div class="label">Brake Temp</div>
                            <div class="value" id="brake-temp-value">--</div>
                            <div class="unit">Â°C</div>
                        </div>
                        <div class="gauge-container text-center bg-gray-700 p-4 rounded-lg">
                            <div class="label">Tire Pressure</div>
                            <div class="value" id="tire-pressure-value">--</div>
                            <div class="unit">PSI</div>
                        </div>
                    </div>
                </div>
                <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
                    <h2 class="text-xl font-semibold mb-4 text-red-400">Predictive Alerts</h2>
                    <ul id="alerts-list" class="space-y-3">
                        <li class="text-gray-400">No alerts to display.</li>
                    </ul>
                </div>
            </div>

            <!-- Right Column: Charts and Map -->
            <div class="lg:col-span-2 space-y-6">
                <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
                    <h2 class="text-xl font-semibold mb-4 text-yellow-300">Speed Over Time</h2>
                    <div id="speed-chart-container" class="w-full h-64"></div>
                </div>
                <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
                    <h2 class="text-xl font-semibold mb-4 text-yellow-300">Racing Line (GPS)</h2>
                    <div id="gps-map-container" class="w-full h-64 bg-gray-700 rounded-md"></div>
                </div>
            </div>
        </div>
    </div>

    <script src="{{ url_for('static', filename='js/dashboard.js') }}"></script>
</body>
</html>
```javascript
// File: src/web/static/js/dashboard.js
// This file remains the same as previously provided.
document.addEventListener('DOMContentLoaded', function () {

    // --- Chart Setup ---
    const margin = { top: 20, right: 30, bottom: 40, left: 50 };

    function getContainerWidth(containerId) {
        const container = document.getElementById(containerId);
        return container ? container.clientWidth : 600;
    }

    function getContainerHeight(containerId) {
        const container = document.getElementById(containerId);
        return container ? container.clientHeight : 256;
    }

    // Speed Chart
    let speedChartWidth = getContainerWidth('speed-chart-container') - margin.left - margin.right;
    let speedChartHeight = getContainerHeight('speed-chart-container') - margin.top - margin.bottom;
    const speedSvg = d3.select("#speed-chart-container")
        .append("svg")
        .attr("width", speedChartWidth + margin.left + margin.right)
        .attr("height", speedChartHeight + margin.top + margin.bottom)
        .append("g")
        .attr("transform", `translate(${margin.left},${margin.top})`);

    // GPS Map
    let gpsMapWidth = getContainerWidth('gps-map-container');
    let gpsMapHeight = getContainerHeight('gps-map-container');
    const gpsSvg = d3.select("#gps-map-container")
        .append("svg")
        .attr("width", gpsMapWidth)
        .attr("height", gpsMapHeight);


    let telemetryHistory = [];

    // --- Data Fetching Functions ---

    async function fetchLatestTelemetry() {
        try {
            const response = await fetch('/api/telemetry/latest');
            if (!response.ok) {
                console.error("Failed to fetch latest telemetry");
                return;
            }
            const data = await response.json();
            if (data && data.length > 0) {
                const latest = data[0];
                updateGauges(latest.sensors);

                telemetryHistory.push(latest);
                if (telemetryHistory.length > 150) { // Keep history size
                    telemetryHistory.shift();
                }

                updateCharts();
            }
        } catch (error) {
            console.error('Error fetching telemetry:', error);
        }
    }

    async function fetchAlerts() {
        try {
            const response = await fetch('/api/alerts');
             if (!response.ok) {
                console.error("Failed to fetch alerts");
                return;
            }
            const alerts = await response.json();
            updateAlertsList(alerts);
        } catch (error) {
            console.error('Error fetching alerts:', error);
        }
    }

    // --- UI Update Functions ---

    function updateGauges(sensors) {
        document.getElementById('speed-value').textContent = sensors.gps?.speed.toFixed(1) || '--';
        document.getElementById('rpm-value').textContent = sensors.engine?.rpm.toFixed(0) || '--';
        document.getElementById('brake-temp-value').textContent = sensors.temperature?.brake_fl.toFixed(1) || '--';
        document.getElementById('tire-pressure-value').textContent = sensors.tire_pressure?.fl.toFixed(1) || '--';
    }

    function updateAlertsList(alerts) {
        const list = document.getElementById('alerts-list');
        list.innerHTML = '';
        if (alerts.length === 0) {
            list.innerHTML = '<li class="text-gray-400">No alerts to display.</li>';
            return;
        }
        alerts.forEach(alert => {
            const li = document.createElement('li');
            li.className = 'p-3 rounded-md bg-red-900/50 border border-red-700';
            li.innerHTML = `
                <div class="font-bold text-red-400">${alert.alert_type}</div>
                <div class="text-sm text-gray-300">${alert.message}</div>
                <div class="text-xs text-gray-500">${new Date(alert.timestamp.$date).toLocaleString()}</div>
            `;
            list.appendChild(li);
        });
    }

    function updateCharts() {
        if (telemetryHistory.length < 2) return;

        // --- Update Speed Chart ---
        speedSvg.selectAll("*").remove();
        const xSpeed = d3.scaleTime().domain(d3.extent(telemetryHistory, d => new Date(d.timestamp))).range([0, speedChartWidth]);
        const ySpeed = d3.scaleLinear().domain([0, d3.max(telemetryHistory, d => d.sensors.gps.speed) * 1.1]).range([speedChartHeight, 0]);
        speedSvg.append("g").attr("transform", `translate(0,${speedChartHeight})`).call(d3.axisBottom(xSpeed).ticks(5)).attr("class", "axis-style");
        speedSvg.append("g").call(d3.axisLeft(ySpeed)).attr("class", "axis-style");
        speedSvg.append("path").datum(telemetryHistory).attr("fill", "none").attr("stroke", "#facc15").attr("stroke-width", 2)
            .attr("d", d3.line().x(d => xSpeed(new Date(d.timestamp))).y(d => ySpeed(d.sensors.gps.speed)));

        // --- Update GPS Map ---
        gpsSvg.selectAll("*").remove();
        const lonExtent = d3.extent(telemetryHistory, d => d.sensors.gps.lon);
        const latExtent = d3.extent(telemetryHistory, d => d.sensors.gps.lat);
        const xScaleGps = d3.scaleLinear().domain(lonExtent).range([20, gpsMapWidth - 20]);
        const yScaleGps = d3.scaleLinear().domain(latExtent).range([gpsMapHeight - 20, 20]);
        gpsSvg.append("path").datum(telemetryHistory).attr("fill", "none").attr("stroke", "#a78bfa").attr("stroke-width", 3)
            .attr("d", d3.line().x(d => xScaleGps(d.sensors.gps.lon)).y(d => yScaleGps(d.sensors.gps.lat)));

        const lastPoint = telemetryHistory[telemetryHistory.length - 1];
        gpsSvg.append("circle").attr("cx", xScaleGps(lastPoint.sensors.gps.lon)).attr("cy", yScaleGps(lastPoint.sensors.gps.lat))
            .attr("r", 6).attr("fill", "#facc15");
    }

    // --- Initial Load & Interval ---
    fetchLatestTelemetry();
    fetchAlerts();
    setInterval(fetchLatestTelemetry, 1000);
    setInterval(fetchAlerts, 5000);
});
```css
/* File: src/web/static/css/style.css */
body {
    font-family: 'Inter', sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}
.gauge-container .label { font-size: 0.875rem; font-weight: 500; color: #9ca3af; }
.gauge-container .value { font-size: 2.25rem; font-weight: 700; color: #f9fafb; }
.gauge-container .unit { font-size: 1rem; font-weight: 500; color: #9ca3af; }
.axis-style .tick line { stroke: #4b5563; }
.axis-style .tick text { fill: #9ca3af; }
.axis-style .domain { stroke: #4b5563; }